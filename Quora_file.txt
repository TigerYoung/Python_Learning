[None, u'Oh, yes, Python is absolutely in its death throes. Which explains why your grandmother\u2019s friend\u2019s alma mater is teaching it in 6.0001, Introduction to Computer Science and Programming in Python. And why we teach it in CS 1, Introduction to Programming and Computation, at Dartmouth. Because MIT and Dartmouth think it dreadfully important for all our students to learn dying languages.', u'Edit: This answer is the first one I\u2019ve written that has generated over 100 comments. I\u2019ve written much better answers than this one that generated far fewer comments.', u'These details from the original question have been edited out:', u"\u201cA friend of my grandmother is a Computer Scientist from MIT, he told me that I should not learn Python because it's a dying language and that I should learn Assembly because it's better than Python.\u201d", u"How old is your grandmother's friend?", u"It's likely that the code on these punch-cards was written in Assembly language. That's the era that Assembly language belongs to, so that's why I ask how old your grandmother's friend is. It could be they are basing their opinion on an outdated era.", u"Some people still do use Assembly language, but only for very low-level code on embedded systems or as output of compilers. If you want a career writing high-performance microcode for computer hardware, like on the chips of network adapters, you should learn Assembly. If you write compiler optimizers, you probably will use Assembly. Writing Assembly is hard to write, harder to maintain, and very time-consuming for both. It also requires a lot of programming skill. And it can't work on another type of computer architecture.", u"But Assembly gives you an opportunity to write code that is compact, efficient, and optimized for the project you're implementing. You can do amazing things in just a few Kilobytes of Assembly code. But today storage is cheap, processing power is cheap. The level of efficiency you can gain by using Assembly is not justified by the extra work, time, and skill it requires.", u"It's true that languages rise and fall in popularity. The name of the game in programming is productivity, and new languages are invented from time to time, which give an advantage in productivity, at least for certain types of work.", u'The vast majority of programmers today use a higher level language, because they need to be more productive. High-level languages are either compiled to machine code (e.g. C or C++) or compiled to an architecture-independent bytecode and run in a virtual machine (e.g. Java) or interpreted (e.g. Javascript, PHP, Ruby, Python, Perl, shell, etc.).', u'You\'ve received many other answers that say the same thing, but I\'ll add my voice to those who say it\'s absolutely false that you should learn Assembly because it\'s "better than Python." This is a foolish, myopic, outdated thing to say. We expect more wisdom from any MIT computer scientist, and trust that they wouldn\'t be foolish. That\'s why many people are answering that your grandmother\'s friend must be pulling your leg.', u'Python is not a dying programming language, it\u2019s one of the fastest growing programming language.', u'Why?', u'2. Full featured', u'3. Strong Data Science Libraries', u'Content Source.', u'Image Source.', u'No.', u'Learn Python. Get some programming experience under your belt. Python has its own elegance.', u'Learn C as the assembly language of the Unix machine. An understanding of UNIX is primitive.', u'Learn MIX so that you can understand Knuth.', u'Learn Java so that you can play well with others and master objective programming.', u"Learn C++ to program in any style you wish. It\u2019s strength is that of a master craftsman\u2019s bench. It's weakness is that you need to understand style.", u'Learn LISP to strengthen your understanding of recursion.', u"Have I told you not to learn something? No. That's because the one thing that you should do is get hooked on learning, especially learning how to problem solve if you believe that it is your favorite art.", u'Best,', u'Bill', u'IBM RPG - Wikipedia', u"Companies still demand this stuff be written and maintained. We get good money because the pool of developers who can maintain this code is getting progressively smaller. It's a good niche.", u"There will be a need for Python developers 20 years from now, if you're good enough.", u"Besides this, don't sweat the language too much: just get good at one then use your general programming knowledge to learn others.", u'Hype', u'No. It is not dying. It is at the end of it\u2019s hype-phase.', u'See, there are over 100 answers to your question but as far as I could read none of the answers targeted this important factor: hype.', u'Python has strengths and weaknesses. As a computer language it is designed to spell problems to a computer in a way he can understand and execute the solutions. The strength of Python is fast prototyping of complex problems. Its weakness is speed, efficiency and the radical decline of both if the problems become bigger and bigger, as well as it has massive problems, if the data it has to manage gets larger than a trivial size. And trivial today can become gigs.', u'Competition', u'With the metal doing the job to make the programs faster alone, there was no much need for a optimization phase of a project over the last 20 years. And it was the rise of the scripts. But that changes now.', u'It is, indeed, a game-changer, where the usage of VHLL like Python or other scripts will get replaced more and more by non-prototyping languages but machine near solutions like C and Assembly. The rise of Assembly is also a point of warning for everyone disbelieving this. It has started to draw more and more people, because if you now want a speed gain of your programs, you have to switch to some real languages. And with real languages I mean the class of C and ASM and it has not much competition on its field.', u'Weaknesses', u'See, Basic was and is still a very nice language and it is much easier to learn than Python. It has a poor standardisation level, but as a beginners language Basic is much easier to learn. But Basic had always the smell of dilettantism with it, because many people with no formal CS education and only a shallow knowledge of programming were using it. The typical application was in Excel sheets for example.', u'So is Python dying? No. And we will see Python programs for a long time now, that so many projects work with that language. But their competition will start to exploit their weakness to remove them from their strongholds, they hold at the moment.', u'I criticised its usage on the Raspberry Pi for example. Because a simple loop isn\u2019t doing what it should.', u'will produce the numbers 1\u20269. Yeah, that is not very intuitive. A Basic', u'will produce 1\u202610 like you would expect.', u'And these are the factors that get Python down from its hype phase to something where others can attack its position. Ruby does this, C#/Mono does it for example as well as the old king-of-the-hill Perl, never underestimate the power of Perl and the inline assembly it can do. Perl is brutal. Back to the draggers Ruby and C#, not that both languages are any better in it, but they start dragging. Shell scripting languages like Zsh and Bash are dragging on its position, too, by the way. Many people started to write real programs in Zsh, I mean - wtf? Teachers claim that languages like Haskell or Scala are more \u201cpure\u201d, which both I find a terrible idea. Typical teacher-level languages with no real application scope. Ideological paradigm-languages I call them, languages that forbid more than they allow. With that Python is much better, Python allows a lot of things that teachers hate. Which is good. It makes a language easy and simplifies the spelling of problems. It might launch some nasty bugs, but that is not the problem here. We are looking for an easy language. Easy and safe is on the different end of the line.', u'By the way, I don\u2019t give too much on the Tiobe index, but there are not too many statistics for this otherwise. For example Tiobe is deadly wrong about C.', u'But the low education standard of the library programmers for Python, for very much for Python is done by non-professional programmers, for example in the science field, the library efficiency and coding practice is poor compared to C for example.', u'It is a beginner language and you get a lot of beginner crap library stuff with that. It is a problem and every Python programmer knows about that. I did commercial Python and it was the first thing I discovered. Many libraries doesn\u2019t mean many good libraries. Well, I\u2019ve seen worse, Java crap for example is the worst. That\u2019s really shitty, Python isn\u2019t that bad but it\u2019s bad enough.', u'I call some bad libraries \u201carchitect-style\u201d code in contrast to \u201cengineer-style\u201d code. You don\u2019t want to live in a house that was built by an architect and that never has seen the skills of an engineer. Trust me in that.', u'Python is a prototype language and this you can see on the libraries.', u'Strengths', u'Still, many scientists from other fields than CS, who have to program, too, are choosing Python for their projects. And that\u2019s not a bad idea. Because there are many libraries out there for biology for example, Numpy for numerics, for genetic algorithms there is the DEAP package and that is all very fine and dandy. Python is the new Basic. All those people who need programmed solutions but are not programmers, have never dipped deeper into the issue take an easy language, which provides them with a lot of the higher programming structures, so that they simply can use them, so they do not need to break their head.', u'Also with Django it has a foot in the Web-door. Still there are some limiting problems with that Django framework and people have to put a lot of work into that.', u'This I mean with quick prototyping. Python projects like iPython and iPython3 support this prototyping aspect very efficiently.', u'Python is not dying. But it gets a beating at the moment and has a hard time to keep its position of \u201cKing of the Hill\u201d.', u'Better, leaner Scripting Languages', u'It is very fast and efficient for a scripting language and I\u2019d like to see more of it in future. It is easy to learn, has a built in limit in functionality that has to be enhanced by hard languages and it is small and fast.', u'Everything a good scripting language should be. Python? Has weaknesses, very catastrophic weaknesses and with the CPUs at a near stand-still of development at the moment every progress you can have is only able to achieve over the use of hard machine-level languages like \u201cC\u201d. Hard, I don\u2019t mean hard to learn, but hard like metal-hard.', u'Python is not dying. Not at all. But it will fall for a while and then they start to really use it, where it is sensible. And not just everywhere and its mother.', u'Better beginner-level Languages', u'There are languages for every purpose a human can come up with. Describing every sort of problem or application to a computer. And some languages are really better with that than Python is. You should learn at least three languages in your life: one binding language of the scripting kind like Python, Lua, whatever, one metal language like C and I guess one Assembly language. Just to get an idea about what you are really doing on computers. The kids often have lost the connection to the metal through all this high-level crap that is standing in their way of curiosity and all those teacher level languages that try to forbid them doing things, dictating them that certain things are bad without ever proving it. Without letting them having their own experience.', u'And that is what kids want to have: own experience.', u'Limited Experience and Knowledge', u'And that\u2019s why the fatherly HLL are on a still stand and suddenly some revolting youth are coming up with Assembly again and wreck the bloated crap of their parents and teachers. As we learned reverse engineering techniques by cracking simple games on our child-computers and then went out into the wild and broken VAX and PDP-11 and other mainframes with the same skills we got from that - shocking the adult system administrators that were all claiming their systems were \u201csafe\u201d. Bullshit. Never underestimate the anarchic power of a curious kid. They will learn that some of the bloated crap is indeed doing a good job on some problems, but all in all they are right, I think:', u'Go and bring down the King of the Hill, kids. Drag down false assumptions and lame performance, replace it with something fresh and new and lean and smart. HLL is for old people. I got a friend in his starting 20\u2019s who really hates Scratch. And I understand why. Scratch is the way teachers tried to force him into computing. Scratch is hiding all truth from him and his programs were like factor 1000 or 10000 slower than the programs of the adults. A kid wants at least to be as good. And can be!', u'Don\u2019t take me wrong, I really love Scratch! If you see that you have to love that. But kids want more than that. At least I wanted more as a kid. And you have to deliver. Python is a kind of Scratch in a way.', u'Scratch is fine and dandy and I love it to show kids how it works. But after that, it is time for us to open the hood and see what really is going on inside. It was the same for me back in the days with Commodore Basic V2. I enjoyed it for a week of enthusiasm, found out that my competition was so much better and faster and I wasn\u2019t able to come near it, but I wanted to: so I learned assembly after a week.', u'Revolution of the Youth', u'And that\u2019s too the \u201cdeath\u201d of Python. The kids will want to learn more about computers. They will want to have a look under the hood. And discover how they can wreck havoc on the code of their dad.', u'How to make him proud. \u201cLook, dad, I did your program on my Raspberry Pi and I\u2019m like ten thousand times faster than your program.\u201d And he will smile and his or her dad will be so proud of his kid, that he nearly will explode.', u'ASM is the true revolutionary language of our time. And many people can\u2019t see why. But it is so easy: a kid wants his father to be proud of him. To be acknowledged to be equal, to be useful. To do something better than they can do.', u'And that is what ASM stands for and Python not so much - if it is not about prototyping, I mean.', u'The Terminator didn\u2019t have Python code in his visual, he didn\u2019t have LISP or even C. It was Assembly MOS6502. And that\u2019s what the kids want, nothing less. They don\u2019t want a washing program with a liter of softener. At least not those, who want to change things. And to be able to change things, you need the power to do it. And you won\u2019t get the power by something that is too slow for a change.', u'ASM allows the Raspberry Pi do visual recognition by OpenCV. That\u2019s hard coded and it works better on something small like the Raspberry Pi than on my more than 600 times faster desktop PC. Guess why? Because they harvest what is there instead of wasting all the potential for some questionable paradigm, instead they harvest it. Maybe that is wrong. But it is on the kids to find out. And my bet is on them not on Python.', u'And even if they are wrong and fail in showing us their power, they will learn by trying that more than ten years at university can. Because their professors are ASM illiterates and often don\u2019t really know what they are talking about, when they are talking about Assembly languages. Or happen to be ignorant to the price you have to pay for any high level language. And a price there is to pay for being lazy.', u'Are you kidding? Python is not going anywhere anytime soon. While there have been quite a few other languages become prominent in recent years, it doesn\u2019t mean that Python is going anywhere.', u'First of all, Python is GREAT beginner language. It is very readable for a beginner and can be applied practically. While no programming language is necessarily easy to learn, Python prides itself on being a little simpler syntax-wise. Python is also easily picked up if you are already a programmer.', u'Python Salary in United States', u"This salary info is from YouWorth. YouWorth is a free mobile app for both iOS and Android that tracks programmer salary data. Not only am I a champion for the product, but I use it myself. The app allows anyone to import LinkedIn skills and track their job market value over time. I'm also notified if there is a change in the skills being watched.", u'A point could be made, that every programming language is dying from its birth until its last user passes away\u2026', u'Objectively speaking, Python didn\u2019t even reach the point where people don\u2019t see the benefits of learning it anymore, so, saying it is dying, is an exaggeration: it will outlive you and your friend.', u'To defend the argument of your friend, the attractiveness of Python used to be sacrificing performance for a nicer learning curve. However, in 2016, computing performance reached a plateau as far as price/performance ratio is concerned. Thus, people are starting to crave performance again; be it for deep learning or any of those trendy new research fields of Computer Science. This go hand in hand with newer programming languages that tries to remain fast while offering a lot more compile-time guarantees (Golang, Rust\u2026), which, while being a bit harder to learn at first, give so much more robustness to moderate to big projects that people praise those languages like the saviors we needed\u2026 In that sense, in 5 to 10 years, people might lose interest in Python (which, like C++, will have only its huge user-base to justify the learning effort).', u'The above argument assume that JIT compilers won\u2019t change the performance profile of Python. Otherwise, it might be pushed back to what it was designed for originally: smaller projects, but will probably not die completely in the foreseeable future.', u'Python is a dying language, as is every programming language ever invented.\xa0 But it probably still has a decade or two left. When I started out the languages to use were Fortran 2 and Cobol.\xa0 A decade later it was Fortran 4 and Algol. Then came Pascal, Ada, C, Lisp, C++, Java, C#, Ruby, and on and on.\xa0 Python is one of the currently popular languages, but there will be successors and just as people today rarely know much about Pascal and Ada and Algol, so a few decades in the future Python will be one for the history books.\xa0 Each language has a sort of "tail" -- for example, there are still a few Cobol programs and programmers around -- and some have longer tails than others (there were hundreds of languages in the 1960\'s and 1970\'s that died out rather quickly), but I doubt either of us will live to see a language so perfect that it doesn\'t die out sooner or later.\xa0 Language designers are too inventive.\xa0 There\'s also a continuing tendency for programming to be done at higher and higher levels (see last paragraph).', u'As many others have explained, there is an assembly language for each different model of computer, although computers in the same family may share the same assembly language.\xa0 Assembly language is one level above binary, and is used when you don\'t have a compiler for a suitable higher-level language (for example, if you are developing a new kind of processor) or when you must do something especially intricate (often hardware dependent), such as achieving maximum speed or minimum space, or writing certain device drivers.\xa0 Languages that are less computer-specific than this are generally called "high level" languages.', u'I disagree with those who say that assembly language is only for "hardware nerds".\xa0 Programming at this level teaches you a whole lot about how the computer really works, and that kind of knowledge is important for a true software engineer, especially those who write compilers or operating systems.\xa0 I\'ve taught computer science and software engineering (and managed software projects in high tech companies) for over 45 years and I still find that software developers learn a lot when they take a course or work on a project that requires them to use assembly language.\xa0 By contrast, I once hired some PhDs in CS whom I later had to let go because their knowledge of how computers work was so dismal.\xa0 They knew all the tricks and techniques for several then-popular high level languages, but had no clue about how real computers work and thus were unable to produce acceptably-fast software on our state-of-the-art products.\xa0 [People who understood how the computer really works were able to satisfy our requirements even when writing in high level languages.]', u'As I suggested above, there has been an ongoing trend for people to write in higher and higher level languages.\xa0 To oversimplify, I\'ll define language level as follows: the smaller the source program, the higher the level of the language.\xa0 For this purpose I measure the size of the source program as the number of characters or, alternatively, as the amount of space it takes up when you store it.\xa0 Today, a large amount of programming is done by end users using tools such as Matlab or even Excel. These are not conventional programming languages, but what you do in them is, essentially, programming in a very high level language.\xa0 I expect the future will see more and more of this, and conventional "high level" languages such as the C family or Python and the like will be relegated to the same position that assembly language is today - something you revert to only for specialized purposes.', u'All programming languages have pitfalls and Python is not an exception. Some of its features are considered as inconvenient or annoying. Although, there isn\u2019t any methods or technics that can estimate \u201cgoodness\u201d of a language. \u201cGoodness\u201d of a language depends on your purposes. Every programmer finds the most suitable tool for performing tasks and achieving a goal.', u'3 Facts that prove Python is still alive:', u'Thank You', u'MY IT GUY', u'As of now, Python is the main language of the Raspberry Pi, which is a mini-computer that is gaining popularity. Python is heavily used in many softwares, like the IDE called Netbeans, as well as Blender, a 3D Graphics and animation software. Python is also used to program video games. However, C and C++ are used more often in this field (ironically, an Uber driver told me that C was dying just last week).', u'Let\u2019s make a long, long. long story short: Python is alive and well.', u'As for Assembly Language, bear in mind that Assembly is like Latin for high-level languages like C, Python, Basic, and R, etc, etc. Assembly language is a little bit above 1s and 0s. It is a low-level language that should be learned only if you want to interact with the machine\u2019s architecture, like your processor\u2019s registers.', u'Python:', u'Perhaps the most consistently growing programming language over the last decade in the history of software industry. Python is a general purpose, high-level programming language; its design philosophy emphasize on code readability. It boasts of remarkable power with a very clear syntax and its standard library is comprehensive in itself.', u'It is used as identification for block delimiters and is unique and popular among the new programming languages that web developers use, in the current times. Python is a fantastic 1st time programming language to learn.', u'Top 10 Programming Languages for 2017', u'And here Python is at 2nd position\u2026\u2026.', u'Python is a widely used high-level, general-purpose and dynamic programming language. It\u2019s \u201cthe\u201d language of the moment and the chosen starter language in university courses around the world. It has the biggest year-on-year job demand growth of any language, stated by the Stone River Academy.', u'Python worldwide has grown the most in the last 5 years (7.0%), following Java in popularity, as stated by PYPL.', u'Every language is being used by companies\u2026 yeah technologies can die but not the languages \u2026. and python is on its\u2019 boom ( as per my analysis )', u'Findings:', u'\u201cIs Python a dying language?\u201d', u"\u201cA friend of my grandmother is a computer scientist from MIT. He told me that I should not learn Python because it's a dying language and that I should learn assembly because it's better than Python.\u201d", u'Historically though, I will note that only about three percent of my earnings (so far) have involved Python.', u'Also, learning assembly can give one a very deep appreciation for not having to program in assembly.', u'This is nonsense on a number of levels. Forgive me if I\u2019m falling for a troll here.', u'Python is deeply entrenched in web programming and scientific computing, to just pick two. There\u2019s no metric I can think of that would support a \u201cdying\u201d diagnosis that couldn\u2019t also be applied to Java, C#, Ruby, etc. etc.', u'\u201cLearn assembly because it\u2019s better than Python\u201d was either intended as a joke or was misheard, misunderstood, or misremembered.', u"Perhaps grandma's friend is grumpy because MIT switched to using Python for intro computer science courses.", u'Short answer: No.', u'Long Answer: Why does everyone have some language they flag as \u201cdying\u201d every few weeks/months?', u'Back when Linux was still slowly making it\u2019s way through the backchannels of sysadmins into production systems, I had a chat with a friend\u2019s relative about Linux. He noted that Linux was a dying operating system and that strong reliable operating systems with corporate ownership, like SCO Unix, would utterly kill them and that I should invest my time/money/future in SCO Unix.', u'Needless to say, I did not take his advice.', u'Each person has their own point of view as to what is important. If you ask someone who spent the last 15 years creating large scale Java backed application stacks, what will they think of Python? Or Ruby? Probably a flash in the pan in their eyes. But if you went to PyCon and asked folks there\u2026 what would their impression of Java be? :)', u'As others have posted, each language has it\u2019s own sense of charm and elegance. Each language has a use case that is best suited for it. Each language has it\u2019s supporters and detractors.', u'Should you take up or give up on Python? Only you can answer that question based on what it is you want to do.', u'But knowing that there are so many languages out there and so many use cases\u2026. why would you limit yourself to one language?', u'Speaking as someone with an Ops background, I find that knowing at least 2\u20133 different programming/scripting languages is important to being able to do my job. Most software engineers I know have at least 2\u20133 languages they are strong in and another 2\u20133 that they are familiar enough with that they can debug it, even if they aren\u2019t going to write an application using it.', u'All advice comes with context. For instance, within what context is the friend of your grandmother\u2019s recommending assembly over python? Is it because it is more bare metal and thus will teach the underlying operations of programming stacks/operations in a more concrete manner? Or is it because that\u2019s how they learned how to program and higher level/abstracted and interpretted languages like Python, Ruby, PHP, Perl, Shell Scripting, etc. are considered \u201cinferior\u201d?', u'It\u2019s in the eye of the beholder and within the context of the use case and the people involved.', u'If you are creating low level, time critical, real-time code, assembler could very well be the ideal choice. You could, of course, also code in C or C++.', u'But no, Python is not a \u201cdying language\u201d. *lol*', u'I\u2019m a malware reverse engineer. I started as an assembly coder. I do almost all of my coding in Python these days. It\u2019s the single most popular (and always getting more popular) language in the information security world. By all means, learn Assembly if you want\u2026but if you are planning to write programs to actually run on some popular operating system, just be aware that Windows XP was the last OS that would allow execution of bare machine-code executables (executables written in assembly are assembled into machine code.) While it\u2019s possible to write portable executable (PE) files in Assembly, it\u2019s far more trouble than it\u2019s worth as anything other than a research project\u2026and bear in mind, I say this as a man who keeps a Windows 98 VM running just so I can still write and run .com (bare machine code) executables.', u'Anyone who told you Python was dying, but recommended ASM as the \u2018wave of the future,\u2019 is either a) messing with you, b) stupid, or c) still living in the 1980s.', u'That would be a very bizarre thing for anyone to say, much less a computer scientist. Others seem to have the Python end of the stick well-handled, but I noticed your question also mentioned assembly. Did he say which assembly? Every CPU has its own assembly language, so every one is quite specific to the one you are writing for. X86 assembly would probably be the most widely applicable, as it covers many different CPUs in the same family\u2026 but that would be if you only used the oldest features of it and stayed away from the fancy new 64-bit stuff.', u'And even then it might not be the most applicable if you consider number of devices it applies to. ARM processors are in all phones (except the iPhone which uses a custom processor, again with a custom assembly language) and many other devices, which likely outnumber X86 processors. Of course, there are different families of ARM processors as well, from lightweight embedded things all the way up to servers being touted for server use in datacenters.', u'Programming languages don\u2019t really die\u2026 but processor architectures certainly do. You can still crank out good ole LISP or FORTRAN on whatever platform you like, but you\u2019d be hard pressed to find a place to ply your trade if your code only ran on PDP-1s\u2026', u'So you can get a brief idea , that Python is one of the trending languages of 2016 and since its inception, Python has never seen a fall in its usage and popularity.', u'Apart from that,', u'so as you can see the pic also, Python is being taught at Top Departments , as their introductory language.', u'But as you know, Every new thing becomes old gradually..so python will also see its degradation someday. But its not gonna happen for next decade or two, as top industries and companies are using Python as their base language. Also, there is a constant search by the top recruiters, for efficient python programmer.', u'So in my view, learn python without thinking any outcomes of its being a trending language or a dying language. Learn it just for the cause that its a great language to learn and be efficient on it.', u'Happy Coding!!', u'I think what this man said is being totally misunderstood as an attack on Python. I think what he was trying to impart was the important experience you get from working with assembly code. If you don\u2019t get experience programming at a low-level getting down and dirty with memory management (and even registers) you won\u2019t truly understand a computer deeply enough to grasp computer programming fully. Python is a very high level language, and is hiding a great deal of behind-the-scenes work from you. This is almost certainly why the man wanted you to learn assembly. He very rightly sees it as programming \u201cwith the training wheels on.\u201d', u'As you get into lower-level languages, development will become more difficult, generally speaking. However. you get more insight and into control over your system. It is a very valuable teaching experience to learn some form of assembly code (Motorola 68k, MIPS, whatever) as you will have a much greater understanding of how a computer really works. You should do this to become intimately familiar with how the stack, heap, and registers are used in computer programs.', u"It's also useful to learn languages like C/C++ as they are not too far removed from Assembly language, still allowing great control over your system. In C/C++ you can even insert raw Assembly instructions into your code to be directly inserted, rather than translated by the compiler. What is missed by many as well is that Python can work beautifully in conjunction with other programming languages. One can be a much more valuable Python developer if they are also skilled in assembly and/or C/C++. The bulk or core program flow can be written in Python, but performance-sensitive portions of the code can be written in a low-level language, and invoked as an external function in the Python code. One may do this without even realizing it by calling a standard linux program inside a Python program to make use of it\u2019s higher performance - the Linux/GNU standard toolset of programs are written in C for high performance.", u'Obviously, as everyone has said - there is no such thing as *the" assembly language. But it\'s also just as obvious that your grandmother\'s friend did not mean that. Learning just about any assembly language is valuable. (at my school, we learned on the Motorola 68k)', u'These other answers have harped up and down about how amazing Python is. You can, of course do wonderful things with it. However, with this much positivity, how about some bubble-bursting! :) It turns out we didn\u2019t stop developing programming languages once Python came around - it\u2019s far from the pinnacle of computer programming and has its own host of issues!', u"I think 20 years ago there would have been many cases where only C/C++ or Assembly code was appropriate, on very small embedded systems. I think nowadays the proliferation of cheap ARM processors has made it possible to have cheap embedded systems running low-performance languages like Java/Python still with acceptable performance. As the above article notes, many programs nowadays are not CPU limited, but I/O limited - the program spends most of it's time waiting for a disk or main memory to respond. This takes many orders of magnitude longer than any language takes to complete an operation in CPU. What's the point of getting the job done in 8 CPU cycles vs 1000 CPU cycles if you're going to have to wait 100000 CPU cycles to get something from disk either way?", u'Python is a dying language. It will probably be used for a long time, as it\u2019s a great tool for writing scripts, perhaps especially on Linux. A fair amount of Linux GUI applications use Python extensively. In the end though, Python is far too poorly performing in it\u2019s current state to exist forever. Better languages will come, with better performance and even better readability and ease of use. Assembly isn\u2019t ever going to die unless there is a fundamental change in how computers work - which I can\u2019t imagine happening.', u'Yes, Python will die, as will PHP, Perl, Java, (Fortran, Algol, ADA,Cobol,\u2026), and it would probably be a better move to learn ARM assembly language.', u'Just not for a while. Things are going to go parallel, and AI based, and there\u2019s no place for those old languages in that world. However, the bare-metal languages like C & assembler will still be in use.', u'Python is not as popular as some other languages, but I work at the U.S. National Library of Medicine. We are a little hidebound, and a little bit behind the curve of fads. In my part of NLM, we are just now switching from ColdFusion for our web applications to Python/Django. We also have some Ruby on Rails, and quite a lot of Java/Spring, but absolutely no assembly.', u'I think your Grandmother\u2019s friend is looking out for your understanding of how the computer works. For that, you could learn the Java bytecode instruction set - that is its own assembly, but more relevant to today\u2019s software engineers.', u'Hah. there is also the same question to Joomla :))) Is Joomla is something done? haha actually it\u2019s not, like Python. Bravo!', u'And many have to change their minds. What about Python? Is there any?', u'Is this a joke question ? Yes, this has to be a joke question.', u"You almost can't write assembly today, in any meaningful way. Doing multi core applications, fetching data from the internet, converting it into meaningful data, it would take you hundreds of years even if you knew what you were doing. Just how are you going to work with UTF16 or UTF8 encoding ?", u"No, either question is a bad joke trying to get people all riled up, or your grandmothers friend is a heavy drug user still living the 1970's.", u'What a strange suggestion. You need to assess what your purpose is in learning to program. Languages like C++, C# and Java continue to be in high demand.', u'I don\u2019t see the correlation between Python and Assembly. While there is still Assembly development going on, it doesn\u2019t seem to be that much in demand. The development world has grown accustomed to high(er) level languages.', u'There is some demand for Python, but in terms of finding a job in the USA (for example), the previously mentioned languages seem in much higher demand.', u'Python - and now for something completely different.', u'Assembler died in 1964 with the release of the Burroughs B5000. This was the first machine to have everything programmed in a high-level language, ALGOL. That is everything - operating system, compilers, environmental software. It is a typed architecture - every word has a tag saying what type it is and what the processor should do with it.', u'It has built-in support for the stack, which is the fundamental way recursion and memory allocation works (local variables are automatically allocated and deallocated on the stack - auto in C) which saved programmers from tediously worrying about memory allocation as they had done in assembler languages. Automatic memory management is a fundamental in HLLs and memory should be allocated and deallocated automatically (as implemented by a garbage collector, so those who eschew GCs are very wrong).', u'So assembler died in 1964, except\u2026', u'The rest of the industry could not accept that and kept on producing low-level machines, until finally programmers were sick of assembler syntax, and so ALGOL-like syntax was borrowed for the C assembler.', u'Now a lot of people here have suggested that assembler is the lowest level to program a machine, but actually not. Even for most machines that is a virtual level and the machine code is built on top of microcode, which really is close to the machine, fraught with timing problems and everything.', u'Then RISC came out (courtesy of Hennessy and Patterson), which said just build compilers that spit out microcode. This was fine, except very insecure, even more insecure than C coding with its myriad of buffer overflow, dangling (or point a pointer at anything you like) pointers. All problems the B5000 had killed by killing assembler in 1964.', u'OK, that was RISC, but we can design the underlying hardware in anyway we like. One basic thing about computers is that they are universal (as in universal Turing machine). That means any program written in any language can be translated into any other language (that might not be simple, but it can theoretically be done). So we don\u2019t need conventional architectures at all. The Burroughs B1700 of the 1970s was an interesting exploration into microcode, but microcode was only used to implement any machine-code architecture you desired, which was oriented to different HLLs.', u'Thus those who say that to understand computers you should study assembler are actually wrong. It is not computers that we should understand, but computation. Computation is at the same time more fundamental and yet more abstract. Electronic computers are just one implementation mechanism. Yes, that is interesting and you should study it, it will help you understand some things, but assembler (and any particular hierarchical memory architecture) will constrain your thinking, just as C and C++ have now constrained the thinking of many programmers. Learn assembler (or machine code) to understand that you do not want to program at that level, and that level adds nothing to the power of computation - in fact, it gets in the way. What should be learnt is the original and simple meaning of structured programming.', u'The one point RISC made was that a machine should be simple enough to fit on a chip - but now we can get huge numbers of transistors on a chip. I\u2019m not saying that is an excuse to build hideously complex machines - rather the reverse. But things like stack handling (which is such a fundamental to computing) can easily be built into a processor now. Hennessy and Patterson ridiculed the stack architecture of the B5000, but they were wrong.', u'So machines should be built that directly support high-level language processing. We need to advance the state of programming art. In fact, Bob Barton wrote a paper suggesting that in 1963 (when he was working on the B5000).', u'https://www.computer.org/csdl/pr...', u'Interesting reading. But we can step even further back in history to the thoughts of Alan Turing that programmers will stick to obscure programming practice when really by recursion, we should be getting higher and higher-level languages (instruction tables).', u'\u201cThe masters [programmers] are liable to get replaced because as soon as any technique becomes at all stereotyped it becomes possible to devise a system of instruction tables which will enable the electronic computer to do it for itself. It may happen however that the masters will refuse to do this. They may be unwilling to let their jobs be stolen from them in this way. In that case they would surround the whole of their work with mystery and make excuses, couched in well chosen gibberish, whenever any dangerous suggestions were made.\u201d', u'Mind blowing Turing quote', u'After all that just remember - always look on the bright side of life (G E- A- D, verse A- D G E-).', u'Python is not dying, but it is maturing. More and more projects rely on it, and that fragments its development. But this does not make it a bad language, especially not a bad first language.', u'And now, after two years of learning different and (for me) new ways to program, I would still use Python for most practical problems. It is no longer the hip language with the unique readability, but it managed to preserve enough of its elegance into maturity that it now combines tools for almost any task with a\xa0 readability and easy of understanding which is hard to find elsewhere.', u'I now write Scheme for fun, but use Python to solve practical problems \u2014 and know that I will still be able to understand\xa0 the code in years to come. I would prefer to tackle the next task with Scheme \u2014 out of a desire to grow and learn in new ways \u2014 but if you were to ask me what you should learn to start programming, my answer would be clear: Start with Python. It will teach you how to structure programs in ways which also work with most other languages. You can later pick up the basics of C to be able to go for projects of any kind. And remember to have fun along the way \u2014 along with actually tackling tasks and finishing them, that\u2019s the most important ingredient to learning.', u'Python for web programming is on a decline. However, there are plenty of areas of mostly scientific computing where there are very few competitors to Python, i.e. Machine Learning.', u'\u201cPython is the second most useful language on earth\u2026 The first is English.\u201d', u"My wife works for a Fortune 500 company and she is on the business/marketing side of the house (although it is on the business side, it relates to mostly Cisco products). She was recently giving a presentation about getting girls and young women involved in programming and computer science in general. She mentioned the Python programming language and how there are a lot of resources for beginners. There were two members of her company's IT staff in the meeting that called her out during the meeting in front of everyone saying how Python is a dead language and no one really uses it anymore. Basically trying to embarrass her for no good reason. When she got home she told me what happened and I was pretty mad about the whole thing and re-assured her that they didn't know what they were talking about. A few weeks went by and I kind of forgot about the whole thing. So I work for a large IT VAR and I get new gigs coming down the pike all the time and today I got word that we got a contract to assist my wife's company on migrating some applications (running on Redhat and Ubuntu) to the cloud. I have decided I'm going to write all of the migration scripts in...you guessed it, Python. This should be fun :)", u"TLDR; Wife's company's IT staff says Python is dead, embarrassed my wife. My next contract is to migrate their apps to the cloud. Will make sure to migrate them all exclusively with Python.", u"Python is a great language, from the code i've seen it is pretty easy to pick up and understand, and is object based like most programming languages.", u'All the great PVR programs like Sickbeard, SABNZBd, NZBGet, Couchpotato, Mylar, and Headphones all use Python.', u'Anyone telling anyone \u201clearn assembly\u201d needs to also give a very lengthy explanation about it.', u'This is also assembly, but MMIX assembly:', u'It may come as a surprise that it\u2019s perfectly possible to be a wizard at MMIX assembly and have no idea about x86 assembly.', u'Also, the lengthy explanation should include an answer to \u201cWhy is assembly better?\u201d because really, there is probably no reason it\u2019s \u201cbetter\u201d except \u201cperformance\u201d and \u201cyou know exactly what the code does\u201d, to which the rejoinder is \u201csometimes, if you know exactly what machine it\u2019s going to be executed on and you don\u2019t mind taking 50x longer to write the code\u201d and \u201cno you don\u2019t\u201d.', u'In other words, from a guy who has been putting code out there for a long time: that \u201ccomputer scientist from MIT\u201d probably did not say that as unqualifiedly as you say, or he had a stroke.', u'He is wrong. Assembly and Python solve different problems.', u'Python is a high level language. It\u2019s developed to be clean and easy to work with. You can knock up a script to scrape a website in no time. Try to do the same thing in Assembly and you\u2019re talking hours/days/weeks. Why would anyone want to make their life that difficult for no reason?', u'A Python script will run on all platforms (most of the time). A program developed in Assembly has to be written for each architecture and operating system (Linux kernel, Win32 API etc) if you\u2019re planning on creating software that works on different machines. Good luck with that :)', u'I\u2019m surprised someone from MIT said that. It\u2019s a very odd thing to say. I could understand if he said \u201cLearn NodeJS instead of Python\u201d \u2026 there\u2019s some value in that.', u'A recent project I developed in Python scraped reviews from Amazon and perform sentiment analysis on the reviews. It then posts all the products with the most positive reviews to Twitter. It took me a couple of hours. I honestly couldn\u2019t even imagine wanting to do this with Assembly. I\u2019d rather stick pencils in my eyes. Ask your friend how he would solve that problem in Assembly.', u'My only advice is learn whatever language you feel comfortable with that\u2019s going to help you solve a problem. So long as the language you chose is capable of solving the problem, and has good documentation/support you can\u2019t go wrong.', u'Despite a number of problems inherent in the historically Python, it continues to be the leading tool in a number of niches:', u'No, but it may seem like it is dying because in the Business Space which has come to dominate perceptions of programming it only has a small mindshare. It is more use in Scientific Programming and perhaps Data Science, where it competes with R. Since Scientists make everything but money it is easy to conclude the language is dying rather than occupying a (hopefully) stable niche.', u'A relevant answer. One of the most elegant languages we used were Payton. We still went with php for our platform. Here is why, more business than technical.', u"How did we settle the heated debate about which platform to use for Storat.com? | Mustapha's Blog | UAE", u'To know whether or not a language is dying first we need to measure its popularity, for that the TIOBE index already exists.', u'Lets have a look:', u'Python as of now occupies the 5th place and growing in popularity.', u'The only reason for a language to decrease rapidly in popularity is for another language to substitute it in a certain production sector.', u'For example, Objective-C falling in popularity while Swift rises and that\u2019s no coincidence. This is happening because Swift is replacing Objective-C in IOS development.', u'So to answer your question Python is not a dying language, at least not in the foreseeable future and its scope is so broad that being completely replaced is unlikely. I can imagine some people switching to Julia for data science but that\u2019s just really a tiny part.', u'Now regarding assembly being better than Python, I can say the former gives you more freedom, however, that is highly overrated since people renounced to that a long time ago for productivity. Anyway assembly is taught in most universities, so when the time comes you can decide.', u"It must have been a joke. There's some good answers here but one point seems to be missing. Coming from more of an Engineering background, we use to use assembler when we needed to get timing right for communication between devices and our computers or microprocessors but as the speed of CPUs has increased the need for programming directly in assembler has decreased significantly. Stuff we use to do in assembler, we now do in C or C++ and even in python because we can easily obtain the needed timings even in higher level languages now. Also OS kernels are often written in C or C++ so using the same language when interfacing with different I/O devices simplifies the code and makes the programmer more productive. Assembler is pretty much only used for platform specific portions of lower level compilers these days. For instance libgcc will have some assembler to make use of platform specific instruction sets.", u'Python is far from dying. Maybe next decade, but obviously version 3 was community killer.', u'Your grandma friend could have one thing in mind when he pointed you to assembly - developers start to forget how computers are working.', u"In world dominated by high level languages (dynamic and weak typed) it's fairly easy to forget that at some point its going to be translated to assembly.", u'Much knowledge and practices are now replaced by optimizations and language features. Thats ultimately good direction because we are able to deal with more comlexity - world is demanding that!', u'Unfortunately there are drawbacks - we start to ignore principles of computing and clever algorithms start to be replaced by auto scaling in AWS.', u"It's clear that some early engineers feel that we are missing something those days - knowledge about basic mechanics of our world.", u'Forgotten Knowledge of Ancient Engineers.', u'Uncle Bob wrote some nice article about microservices in old times, that will give you some nice context.', u'The First Micro-service Architecture | 8th Light', u'I have a standard answer for people asking questions about learning language X or language Y: learn them both. And at least 3 others.', u'Learn Python. Learn another interpreted scripting language. Learn C and C++. Learn assembler for a popular CPU (and yes, MIXAL, because Knuth!). Learn Go or some other new hotness. Learn LISP. Learn Erlang. Learn Java. Learn Javascript! Learn X, Y, and Z and all the other letters.', u'At any given moment, you may do different bits of work in 2 or 3 different languages. You may have to read code in 2 or 3 more. The ability to switch to the different coding paradigms in each is extremely valuable.', u'There\u2019s more than one way of getting things done, even in rigid environments. Different parts of the system use different tools. So you need to know how to think in their language models.', u'Flexibility and versatility make you very valuable.', u"You might say language like Fortran is dying (sorry to Fortran fans) based on popularity and age. Programming languages tend to become obsolete when mainstream programmers become interested in solving more modern, contemporary problems which those languages couldn't evolve to solve.", u"Python is nowhere near its death. In fact, it is getting more and more traction both in web development (where Ruby used to rule) and as machine learning is growing at a breakneck speed. Python is so handy it's like a magical swiss-army knife you wished you had. It's true that Python had lagged behind a bit during its infamous v2 to v3 transition and how it was a bit slow to address concurrency, but it is a language so simple and readable yet very powerful. So stop worrying and try it out.", u'Several good answers already, but I\u2019d like to share my opinion:', u'Python may not be a dying language, I believe that, but I think it will never be adopted in large scale by capitalist companies, those driven by profit.', u'One of the reasons being because Python is more complex and harder to maintain than Java for example. That\u2019s my opinion, considering: python and java weak and strong points, but more important, considering how team work can be a mess, now add time to the equation and maybe you will agree with me.', u'If you work alone, ok, no big deal, but try to maintain a ten-year-old python software with 1 million lines of code divided into several integrated modules, developed by 100+ people along the years, each one of them using a different crazy stuff python has to offer, on top of complex and interdependent business rules. I would say: Welcome to hell.', u'One other thing: I recently did an online course about machine learning using python, the instructor used python 2.x and I chose to use 3.x, some things didn\u2019t work on version 3.x, so I had to search online how to adapt the code. That can be a big problem when you think about migrating python code from 2.x to 3.x and future versions, using Java again as an example, I can migrate from Java(SE) 5 to Java 7 (or even 4 to 8, I\u2019m not sure) with zero, or close to zero, problems.', u'I like python to study and explore things, but I would decline a job offer to work with it full time, of course, everything\u2019s negotiable ($).', u'Colleges use Python as a \u201cgateway\u201d language to introduce new students to the concepts of programming. It\u2019s value is that it is easy to read and easy to program in. Some businesses use Python, while others do not.', u'If you are looking into a career as a programmer then look through Monster, Indeed, etc and read articles to figure out what is prominent in the industry. Sometimes hardware advancements makes a previous language near obsolete, due to things that the programmer used to control are now controlled by the hardware. Going with a Microsoft language or Java will still make you relevant in the workforce.', u'Happy Coding!', u'Well, it sems that even MIT has its morons ;)', u'Is English better than French or Chinese? Hint: the silver bullet.', u'Guide: Python is easy to learn and very powerful, and clearly will give you more oppotunities than assembler. In fact it could be one of the best languages to learn first.', u'Nope, is not going away before you! Also, the number of jobs are probably 10:1 for Python when compared with Assembler, and I am pretty sure than almost nobody hires people with assembler skills that do not already master C and even C++. If you asked this question, I am sure you are not one of them, nor that you can afford to master them.', u'It is funny, this morning I was thinking about how I thought Python is going to die 5 years ago and yesterday I bought a book about Data Science with Python Libraries.', u'Python is actually trending these days among data scientists and analysts. It is easy to use. You can do plain scripting, functional programming, object oriented programming in Python. It also has reasonable performance.', u'About assembly, every good programmer should learn assembly. I mean it is the basic machine language. Although currently it is not practical for complex product development, a programmer should know everything will be converted to assembly code. Most of the engineers learn assembly at school, use it a few semesters, then never use it.', u'So learn assembly at school never use it again.', u'Learn python, it is nice.', u'Also, scala and go-lang is trending by the way.', u'A good exercise would be to try and make a simple blogging website with each language. You might find the following O\u2019Reilly guide helpful, probably written by your grandma\u2019s friend, before needing therapy.', u'Seriously though, I went to MIT and studied computer science there. They don\u2019t teach you Assembly (ok maybe a little), but you definitely can\u2019t get your degree from MIT CS without knowing Python these days.', u'Oh, and I have to put some length extra blurb here because quora does not know that A picture is worth a thousand words and collapses my answers.', u'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent fringilla viverra ex, sed feugiat orci maximus non. Donec a magna nec purus pretium hendrerit. Maecenas pellentesque dolor laoreet, convallis tellus at, fermentum tortor. Fusce vulputate tellus nec sem accumsan finibus. Sed ullamcorper cursus nunc. Cras porttitor mi eros, nec porta ex elementum luctus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent consequat volutpat cursus.', u'Nam eget ligula suscipit enim semper maximus. Aliquam nulla augue, faucibus a bibendum ac, dapibus non dolor. Nam augue augue, interdum sit amet imperdiet et, placerat non metus. Sed ipsum orci, pharetra et lectus id, aliquam commodo magna. Donec interdum facilisis turpis vitae lobortis. Nulla vitae magna eu lectus interdum eleifend. Proin sit amet mauris a elit fermentum pulvinar vel eget nunc. Sed bibendum ante nisi, nec cursus nulla ultrices vitae. Vivamus vel dictum nisl.', u'Nullam venenatis ligula dictum metus tincidunt, ut placerat nisl iaculis. Phasellus massa mauris, congue et congue et, condimentum sed lorem. Aliquam id lobortis felis. Quisque sed semper nibh. Vivamus semper, ligula id pretium porttitor, lectus erat volutpat quam, eu tristique eros tortor a leo. Etiam enim odio, fringilla eget nisl nec, congue porta justo. Nam molestie pellentesque augue vestibulum luctus. Suspendisse potenti. Lorem ipsum dolor sit amet, consectetur adipiscing elit. In hac habitasse platea dictumst. Phasellus ut maximus odio, sed pretium nunc. Pellentesque blandit scelerisque malesuada. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed porttitor lectus arcu, eu commodo turpis ullamcorper mollis. Etiam sit amet est in lorem sagittis fermentum sed at arcu.', u'That\u2019s an extremely strange answer from a computer scientist as it doesn\u2019t make much sense. Sounds to me like a joke, actually.', u'Irrelevant of the status of Python you cannot compare Assembler with Python, it\u2019s just like comparing a car with a cabbage. You can actually write assembly code in Python.', u'Python is right now ranked #3 in the IEEE Spectrum ranking of popularity after Java (#2) and C (still #1).', u'If you want to program hardware you will have to learn assembly code anyway and it\u2019s also a part of the Computer Science curriculum, so that there is no way around.', u'So, nope, Python is not dying, it has nothing to do with assembly and you will have no choice but to learn assembly if you want to study computer science.', u"Python is not going to die because not only can you use it as the core language for your project, it does an amazing job as a supportive language for your project.\xa0 For example, due to the simplicity in writing mathematical algorithms, we use Python as the backbone to a PHP application.\xa0 Another thing we use Python for is writing server scripts to perform tasks without having to Bash script everything.\xa0 I love Python, even though I'll admit it's not my first choice of language for certain projects, and I use it sparingly for micro services and server scripts.", u'Side-Stepping the discussion of Python\u2019s longevity completely; advising you to learn assembly code is kind of like telling a budding architect they\u2019d be best served learning how to bake bricks before they started building houses. Yes, a knowledge of the rudimentary aspects of any industry/discipline is beneficial. Such lower-level focus would most-likely be quite cumbersome for those new to the field, likely standing as a formidable hurdle along their path.', u'At risk of wearing out the architectural metaphor\u2014the deep inspection, reconsideration, and evolution of fundamental components of any industry is integral on the path of technological evolution. You don\u2019t need to know how steel is made to design a beautiful concept design, just like you don\u2019t need to know the lower-level processes of modern programming languages to author a useful application. However, if you want to build the world\u2019s tallest skyscraper, you\u2019ll need to evolve some materials. Similarly, if you want to code a truly innovative product capable of performing under modern demands, you\u2019ll likely need to be able to think within lower-levels of programming processes.', u'TL;DR: You grandma\u2019s friend is an asshole, Python is the most-popular & most supported programming language today, and assembly code would likely strip your of your enthusiasm as an introductory language.', u"It's a ridiculous assertion that any language is intrinsically better than another, unless the purpose of the program is part of the equation.\xa0 Python and assembly have different strengths and weaknesses in different situations, like all major computer languages.\xa0 Popularity is certainly a factor to help peg the robustness of community support, the viability of bugfixes to the core, the rate of evolution of the standard library.", u"It sounds like you're being trolled by someone who has disdain for Python.\xa0 Use your own judgement.", u"Apparently your grandmother's friend learned to program in 1965 and thinks we haven't come a long way in language choices.", u"Python is a modern interpreted language in which you can create far more interesting and useful features faster than assembly code. It's easier to read, easier to debug and easier to combine with other, freely available code.", u"One might reasonably argue about the relative value of Python versus Java or C++ or C#, but most modern software shops would never approve of assembly unless there was some massive speed issue, but even then I'd just throw more hardware at it.", u"Will there be a day in future when we won't need to write a code?", u'What will happen to Python that day?', u"Well I even doubt that Python will survive by that day but does that mean it's of no use to learn Python today. Of course not, one reason why Python can be considered a good programming language is because of its simplicity.", u"Today there is a lot of demand for Python. It can be used for many different tasks, from video editing in Maya to writing code for Raspberry Pi. It's very popular for Web Development, with frameworks such as Django and Flask.", u"Now the question is, if it's better than Java or Ruby. Well you can't really be in favour of just one. It all depends on what are you going to build, the budget and the deadline. So all programming languages are good at what they do.", u"Ok. That's not helpful advice.", u"The professor probably likes assembly language, and fails to understand that for day to day development, it really isn't necessary to know.", u"It's interesting - to some people - but not especially helpful unless you are going to write optimizing compilers.", u"It's like saying an accountant needs to know advanced spatial mathematics, integration, blah blah. Sorry I've forgotten a lot of my advanced maths... because I don't use it. An accountant needs to know about adding up, percentages, fractions, and rudimentary statistics to be effective.", u"Start with what you need, not with someone else's passion.", u"Python is used quite extensively in educational environments because it gives a good grounding of the development techniques used in many other languages. It has quite a large set of advanced libraries too as a consequence of this, such as around machine learning. That's pretty useful to know in today's world.", u'Assembly teaches you assembly. And very bad practices for any higher level language. But it does teach you what happens behind the scenes. Learn a little about it once you have grasped the fundamentals of programming with a language like python, and it will make a lot more sense.', u'No, Python is not going anywhere anytime soon. If you don\u2019t believe me, let\u2019s get down to facts:', u'If you are an absolute beginner to programming languages, I suggest you to start with Python sooner than later. Don\u2019t let anyone fool you. Google can be way better than people suggestions sometimes. When someone tells something that is not quite right, take it with a grain of salt and google for some facts. If you do that you will get more accurate results most of the time.', u'Python may be dying, but it is still widely used. If you are just entering college I recommend staying away from Python in early classwork because its structure is just different enough from the much more popular C and C-derivative languages that it can really mess up your understanding of program structure (especially the use of indentation and semicolons). Once you have \u201cmastered\u201d C and its derivative languages you will be in a better position to understand (and love or hate) Python.', u'The first question you should ask is what do you want to do? Then, pick the right tool for the right job. Python is still an excellent choice for learning one\u2019s first programming language because you\u2019ll learn many concepts that apply to all languages but Python is easier to start with than many other choices. It is found commercially everywhere from web content management systems to scientific programming. Then, you can move on with confidence to learn another language. All developers should know more than one. If you wish to program web pages, learn JavaScript. Prefer to write device drivers? Then a mixture of C and assembly is probably your choice. With some experience, you\u2019ll know where to go next.', u'There is always the chance that Python could be replaced by a better program. I actually was a student in the online version of MIT\u2019s 6.0001, Introduction to Computer Science and Programming in Python. I am not sure if the computer scientist was being sarcastic or what level of a computer scientist he is.', u'There are the people who keep the college computers together as employees of a university. They can sometimes be self educated as programmers. From that person\u2019s perspective, assembly could be a better protocol.', u'However, Python is finding applications in data science and artificial intelligence.', u'Sorry to tell you but this is complete bullshit.', u'Nobody in their right mind codes assembly, unless you want something that\u2019s really optimized, or if you\u2019re trying to bug track, then it can be useful, but very rarely.', u'Python is not a dying language. Take a look at this website, which ranks python as one of the most sought after skillsets, not assembly.', u'But then again, I\u2019d also argue that it depends what you wanna use it for. If you wanna go and code / make your own chipsets, then by all means, assembly would probably be a better fit than python. But if you\u2019re going to make anything normal coding, like an application or a website, then python is a great place to go!', u"All languages will die eventually, but at the moment they are all still alive. It's not that you should learn one language and never touch the other. You could learn assembler, but if you are new to programming then I wish you good luck with that. I'd suggest learning a simple to learn language first, then try a few different languages just to get a feel of them. You will find one that suits you best, and learn that one better. Each language has its own advantages and disadvantages, that's why you should pick the right language for the right job. Some things would be best build in a language as php, pearl, or python. Other stuff would be better to build with something like goor node.js maybe something else you would use c++. I wouldn't really use assembler nowadays, it's a very good language, don't get me wrong, but it's difficult to learn. It is really low level and close to the machine language, but it's way easier to use one of the other languages available.", u'There is nothing wring with learning Python. I do not care for it, but it has its strengths. And in today\u2019s world, there are many great tools written using Python. I dont know how an MIT CIS major goes from Puthon to Assembly. Assembly is such a low level language, that few developers use it except when they must. I would learn assembly after you learn a coule other languages. I think it is important to understand good coding patterns before code at such a low level.', u'Python is a good beginner language because it enables you to use a very high level language to interact with and use lower level C libraries. The JIT in python means it will run slower than a C program, but not much to prevent people from using it.', u'I would urge you to learn Java, C, C++, Objective-C, Swift, C#, Python, Perl, JavaScript (Ecma Script), and some variant of Basic. This will give you the basic foundations for all the popular platforms today.', u'Programming Languages are like tools, you cannot use hammer to dig and an axe to cut vegeatables, user must know atleast a bunch of tools.', u'No, Python is not a dying language. Importance of python is growing day by day', u'Python has grown into a mature general programming language and can appeal to more developers today as Performance vs Hardware is not an issue.', u'Python a dying language? I don\u2019t know what your grandmother\u2019s friend is smoking. Python has become central to Data Science and Machine Learning. Many tools have been written it, such as dJango and Ansible, and many of the applets in KDE. Python has spread broad and deep.', u'Assembly, on the other hand, is not used much in most places outside of some low-level embedded applications that hits \u201cbare metal\u201d.', u'So, the rumors of Python\u2019s death have been GREATLY exaggerated. In fact, only now, after 7 years of Python 3 being available, has Python 2.7 only begun to be displaced. That should tell you something.', u'Learn Python, Ruby, C++14, and Java. If you are app development for Android or iOS, there\u2019s a number of languages to choose from, depending on what you wish to accomplish. For massive concurrency, there is Erlang / Elixir, and Go. Many choices to choose from. Do some research as to what direction you wish to go, and go for it.', u'All computer languages are dying from the moment that their first design specifications are finalized. Every computer language has had a second version to keep it alive. FORTRAN and even COBOL are still \u201calive\u201d due to the enormous number of production programs running on current hardware and which were recently re-compiled on updated compilers.', u'When I studied compiler design in the early \u201880\u2019s there was no such thing as \u201cobjects.\u201d Now even COBOL can deal with them.', u'If you are wondering what language to concentrate on in college, don\u2019t, it probably hasn\u2019t been designed yet. Learn data structures, learn logic, learn how to divide and conquer, meaning if a concept is too complex, write a subroutine, if the subroutine is too complex write another until a 5th grader can understand the logic. If you find you have three or more IF statements (IF within an IF within an IF) write a subroutine. Read James Martin.', u'Yes, of course!', u'A programming language is just like a human being. It will first be born, grow up, then mature, and little by little, it will eventually die.', u"However, until someone creates a better language than Python, I won't stop using Python never. I mean, it is simple, fast, beautiful and readable. You can do a lot of prototypes with a considerable small amount of time.", u'There is no way that Python is a dying language, this is due the many fields that python works perfectly for, it\u2019s a major language in machine learning and data science field in addition to many other fields regarding programming in addition to the IOT, yes many alternatives does exist but python is not dying.', u'Check this link for more:', u'IT Best Kept Secret Is Optimization', u'If your question isn\u2019t in jest, then your grandmother\u2019s friend\u2019s answer is. Or perhaps s/he is simply trying to recruit more computer scientists interested in actually making the sausage (i.e., in foundational computer architecture principles, such as processor design and machine languages.)', u'The most popular tools are those which are the most useful; and the most useful are those which ease the effort of invention. In fields dependent upon many short cycles of experiment, such as, well, everything nowadays - e.g., product design, computational finance, meteorology, computational biology, social media services, and the data analysis that underpins it all - tools such as Python make it easy to express ideas about data and operations, and to thus run experiments quickly. Traditional assembly language, being one step away from the machine language, does not make it easy to express those ideas. That\u2019s why higher-level languages such as Python were invented, to abstract away most of the details of assembly and machine languages.', u'Python isn\u2019t dying. In fact, a surprising number of computer scientists, let alone programmers, have little functional knowledge of assembly languages, machine languages, machine architectures, number representations, and other aspects of computer architecture. Thankfully a relative handful of people expertly attend to those architecture details so that the much greater number of developers and researchers can construct and use tools thereupon. I encourage you to learn about computer architectures, and learn how to program in assembler, if for no other reason than to appreciate the capabilities and limitations of what\u2019s running under the hood of the machines on which your code will run. But unless you write device drivers, or compact code that runs on resource-constrained or specialized processors, you likely won\u2019t use assembly in your working life. You will use languages that let you express ideas with high abstraction, and that have large numbers of libraries available so you can do things like read and write files, and run statistical operations over data sets, without having to code the details of such things yourself.', u'I use Python, among other languages, in my work. Python is on a strong march across the language-adoption landscape, but there are many other languages of similar expressiveness. I haven\u2019t used assembly since my school, device driver, and robotics days.', u'Three months ago, I knew nothing of Python, and I used to think, it would be worthless to spend time in learning this language. But ya that was three months ago.', u'Reality: You can\u2019t do without Python. Majorly if you intend to use machine learning (read \u201cdeep\u201d here). Flexibility and simplicity at its best.', u'Moral: Grandpa can take break for sure.', u'None of these languages are \u2018dying\u2019.', u'They are either fully developed, still being developed, supported, or unsupported.', u'\u2018You should not learn\u2019\u2026 that\u2019s kind of ridiculous. Learn if you want to.', u'WHY should you learn one language OVER another? This depends on the use. If you are seeking a job, Python is among a list of recommended languages. It\u2019s probably in the top 6 for finding a job.', u'If you are seeking to develop a certain kind of software to run on a certain kind of computer, then find the language appropriate to that application environment.', u'As for assembly, it\u2019s possible that there might be roles where assembly is required. Most computer software is compiled, or interpreted, which means it is converted into assembly. It\u2019s fairly unlikely that there will be a lot of market opportunity for assembly at this point. However, as to whether or not you should learn it, of course see above.', u'Oh! That is just nostalgia. No one except embedded systems engineers and OS developers use or will use assembly. As an OS enthusiast myself. I have learned and still am learning assembly. However it is worth noting the following.', u'In short, assembly is great, and it is worth learning. However, not as a substitute for something like python or R. You have to have a low level PL like assembly or C, and a high level one like python or R.', u'If Python is dying then Quora must be, too.', u'Fun fact: most of Quora is on Python. I doubt they would continue to use a dying language.', u'Another fun fact: many data science and machine learning libraries are also in Python, which is often the language used to teach these popular topics.', u'With so many people using it, I\u2019d be very surprised if it is dying or if support for it suddenly stops.', u'Nonsense! While I have to disclose that IBM 360 BAL (Basic Assembler Language) was the first language I learned, I would also point out that was in 1975. Only learn assembler if the task at hand requires low level machine access and the best chance for speed. Even then realize that good old fashioned C is only a small step higher on the code scale but vastly easier to code! Very nearly as fast in many cases as well. The short story on Python is that if it is good enough for Google it is most likely good enough for you. Better yet, learn both\u2026', u'Infact python is growing language. World is moving towards data interpretation and visualisation, deep learning, machine learning and artificial intelligence. Python has been one of the initial contributors in all these (including others like C++).', u'Over the time python us going to gain its market share as world shift to more advanced analytical codes.', u'No ,', u'it is definetely not . I \u2019ve tried several languages. It is the more interesting one I\u2019ve tried so far beacause of its vast possibilities. You can implement it in data science , web development and even machine learning .', u'You can easily slice a document with words using python therefore it is used in data science.', u'There are several libraries and frameworks for it and even mathematical ones , therefore it is handy in data science and machine learning.', u'Is there anything else that a computer can do?', u'I am afraid this guy was messing with your head!', u'Actually, Python is one of the "Go to" languages to any startup that want to get quickly into market, differ performance matters in order to expand very well; and this make it still a relevant programming language. Why? Because it is:', u"But really! Is that the real question? Should a language be more or less worth learning because it's status (dying or not)? What was your goal when deciding to learn a Programming language at first?", u'Consciously or unconsciously, the language we choose to learn intrinsically depends on the abstraction layer that we want to operate on, may it be a web app or an embedded system. So both languages, dying or undying are worth learning, for beginners that want to master the targeted abstraction layer. Both will teach you all the foundations and building blocks for creating "something" on that layer, and this is probably what is the most important from a learning perspective.', u'I tried avoiding Python this whole time. But recently I\u2019m forced to learn it. I hate the syntax, prefer JS over Python anyday.', u'But why am I forced?', u'I haven\u2019t been programming since I started work in Finance. I see automation, Machine Learning and AI all written in Python to quickly solidify a mathematical model of machine learning.', u'In many ways it\u2019s a gateway language to AI.', u'My aim is to use Python to learn more on Machine learning with the focus of evolving that into AI in future. When I get more serious I\u2019ll switch to C++.', u'But for the time being it is not dead. It has a new lease in life in the form of Machine Learning, Algorithmic Trading and AI.', u'First Steps Towards Programming', u'>>> # Fibonacci series: ... # the sum of two elements defines the next ... a, b = 0, 1 >>> while b < 10: ... print b ... a, b = b, a+b ... 1 1 2 3 5 8', u'This example introduces several new features.', u'I find this ridiculous and hilarious', u'python is a very vital and important scripting language still used by many company\u2019s today.', u'Its ability to reduce multiple lines of code into very small chunks is one of the many reasons why python\u2019s importance can\u2019t be over emphasized', u"'Dying' as in heading the wrong direction in terms of adoption? Maybe, any language is going to have a peak where it's widely used and then start slowing down - Python is pretty old at this point. All I know is that I'm still using it and have no shortage of people looking for my skills. Assembly language - now that's a dead language. Basically your grandmothers friend is a dinosaur so ignore him.", u'Python was intended to be the replacement for BASIC. That language that all natural born nerds of the 70\u2019s learned when they were about 10 years old and the nerd DNA asserted itself. It was intended to be a toy, a teaching tool that would be used to spring board to actual professional programing languages like C++. But something happen, people started writing extensions for Python, using it instead of Perl for scripting, and using it in micro controllers and embedded system. Now people are actually using this toy to do real work. Its like using Lego Mindstorm robots to assemble cars. So no Python is not dying. In fact, it is being used in ways that it was never intended to be used.', u'Python is the most popular introductory language. but at the same time, this entire site is built on it.', u'Google uses multiple languages including c++, java, Python, and JavaScript for its search engine. c++ for things that need to be incredibly fast, and Python for things that need to be developed very quickly.', u'Python seems to me, at times, more powerful than java, and simpler than batch. once you try it, there\u2019s no going back. I typed my first line of python just 3 days ago, and now it\u2019s the only language on earth.', u'I\u2019ll bet he\u2019s just biased against python for some reason. He must know it isn\u2019t dying.', u"Learn both! Assembly will give you a great understanding of what's actually happening with your code. But when you actually go to develop some applications you'll probably get a little farther along using something a little higher up on the chain, like Python.", u"Dying or not, it has to depend on the industry and your company's practice. Heck, if Python is the standard in your team, it will be very much alive within your team", u'Well aside all the other comments, I think it\u2019s a matter of perspective, for example try to make a web services or REST API with assembly, and you will have a tremendous work to do(I don\u2019t know if it\u2019s possible at all).', u'So the question would be, In which scenario is better assembly than python?', u'Another thing to notice is that assembly is low level and python is high level, so that should count too.', u'All depends in what\u2019s your interest.', u'Forget about Assembly. Tell your MIT acquaintance that real developers only code in punch cards. I suggest you buy the book "punch cards for idiots" and start learning the secrets of the trade. Once you master that, start working with terminals and only after you mastered that move to Assembly. At this rate, and assuming you progress according to the series that I just created for you, I assume that by the time you get to Python you will already be retired. Oh, and by the way you should have no doubt that by the time you retire Python will still be a viable programming language. ']