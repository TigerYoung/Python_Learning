[None, u'Oh, yes, Python is absolutely in its death throes. Which explains why your grandmother\u2019s friend\u2019s alma mater is teaching it in 6.0001, Introduction to Computer Science and Programming in Python. And why we teach it in CS 1, Introduction to Programming and Computation, at Dartmouth. Because MIT and Dartmouth think it dreadfully important for all our students to learn dying languages.', u'Edit: This answer is the first one I\u2019ve written that has generated over 100 comments. I\u2019ve written much better answers than this one that generated far fewer comments.', u'These details from the original question have been edited out:', u"\u201cA friend of my grandmother is a Computer Scientist from MIT, he told me that I should not learn Python because it's a dying language and that I should learn Assembly because it's better than Python.\u201d", u"How old is your grandmother's friend?", u"It's likely that the code on these punch-cards was written in Assembly language. That's the era that Assembly language belongs to, so that's why I ask how old your grandmother's friend is. It could be they are basing their opinion on an outdated era.", u"Some people still do use Assembly language, but only for very low-level code on embedded systems or as output of compilers. If you want a career writing high-performance microcode for computer hardware, like on the chips of network adapters, you should learn Assembly. If you write compiler optimizers, you probably will use Assembly. Writing Assembly is hard to write, harder to maintain, and very time-consuming for both. It also requires a lot of programming skill. And it can't work on another type of computer architecture.", u"But Assembly gives you an opportunity to write code that is compact, efficient, and optimized for the project you're implementing. You can do amazing things in just a few Kilobytes of Assembly code. But today storage is cheap, processing power is cheap. The level of efficiency you can gain by using Assembly is not justified by the extra work, time, and skill it requires.", u"It's true that languages rise and fall in popularity. The name of the game in programming is productivity, and new languages are invented from time to time, which give an advantage in productivity, at least for certain types of work.", u'The vast majority of programmers today use a higher level language, because they need to be more productive. High-level languages are either compiled to machine code (e.g. C or C++) or compiled to an architecture-independent bytecode and run in a virtual machine (e.g. Java) or interpreted (e.g. Javascript, PHP, Ruby, Python, Perl, shell, etc.).', u'You\'ve received many other answers that say the same thing, but I\'ll add my voice to those who say it\'s absolutely false that you should learn Assembly because it\'s "better than Python." This is a foolish, myopic, outdated thing to say. We expect more wisdom from any MIT computer scientist, and trust that they wouldn\'t be foolish. That\'s why many people are answering that your grandmother\'s friend must be pulling your leg.']